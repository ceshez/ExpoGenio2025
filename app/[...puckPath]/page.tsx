/**
 * This file implements a catch-all route that renders the user-facing pages
 * generated by Puck. For any route visited (with exception of other hardcoded
 * pages in /app), it will check your database (via `getPage`) for a Puck page
 * and render it using <Render>.
 *
 * All routes produced by this page are statically rendered using incremental
 * static site generation. After the first visit, the page will be cached as
 * a static file. Subsequent visits will receive the cache. Publishing a page
 * will invalidate the cache as the page is written in /api/puck/route.ts
 */

// app/[...puckPath]/page.tsx
import { prisma } from "@/lib/prisma";
import { notFound } from "next/navigation";
import type { Metadata } from "next";
import { Client as Viewer } from "./client"; // o tu componente de render p√∫blico

export async function generateMetadata({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const rec = await prisma.page.findUnique({
    where: { path },
    select: { title: true, content: true },
  });
  return {
    title: rec?.title ?? (rec?.content as any)?.root?.props?.title ?? "Genio",
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}) {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;

  const rec = await prisma.page.findUnique({
    where: { path },
    select: { content: true },
  });

  if (!rec?.content) return notFound();
  return <Viewer data={rec.content as any} />;
}

export const dynamic = "force-dynamic";

